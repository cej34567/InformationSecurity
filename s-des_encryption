#include<iostream>
using namespace std;

int main() {
	int ptxt8[9] = { 1,0,0,1,0,0,0,1 };	//8비트 평문
	int key[11] = { 1,0,1,1,0,0,1,1,1,0 };	//10비트 키
	int P10[11] = { 3,5,2,7,4,10,1,9,8,6 };	//P10문자표
	int P8[9] = { 6,3,7,4,8,5,10,9 };		//P8문자표
	int IP8[9] = { 2,6,3,1,4,8,5,7 };		//IP 문자표
	int EP[9] = { 4,1,2,3,2,3,4,1 };
	int P4[4] = { 2,4,3,1 };
	int IP_1[9] = { 4, 1, 3, 5, 7, 2, 8, 6 };
	int p_10[11], LS_1[11], LS_2[11], ip[9], ep[9], k1[9], k2[9], Xor[9], row, col, s0, s1, s0s1[5], p4[5], p4Xor[5], sw[9], ip_1[9];
	int S0[4][4] = {
		{1,0,3,2},
		{3,2,1,0},
		{0,2,1,3},
		{3,1,3,2}
	};
	int S1[4][4] = {
		{0,1,2,3},
		{2,0,1,3},
		{3,0,1,0},
		{2,1,0,3}
	};

	//S-DES 키의 생성
	for (int i = 0; i < 10; i++) {
		p_10[i] = key[P10[i] - 1];
	}
	for (int i = 0; i < 10; i++) {			//make LS_1
		if (i == 4) LS_1[i] = p_10[0];
		else if (i == 9) LS_1[i] = p_10[5];
		else LS_1[i] = p_10[i + 1];
	}
	for (int i = 0; i < 8; i++) k1[i] = LS_1[P8[i] - 1]; //make k1
	for (int i = 0; i < 10; i++) {			//make LS_2
		if (i == 3) LS_2[i] = LS_1[0];
		else if (i == 4) LS_2[i] = LS_1[1];
		else if (i == 8) LS_2[i] = LS_1[5];
		else if (i == 9) LS_2[i] = LS_1[6];
		else LS_2[i] = LS_1[i + 2];
	}
	for (int i = 0; i < 8; i++) k2[i] = LS_2[P8[i] - 1];	//make k2

	for (int i = 0; i < 8; i++) ip[i] = ptxt8[IP8[i] - 1];		//make ip(8비트 평문 대입)
	for (int i = 0; i < 8; i++) ep[i] = ip[EP[i] + 3];		//make ep(ip오른쪽 4비트를 1234로 구분 후 문자표에 대입)

	//ep와 k1의 xor 연산
	for (int i = 0; i < 8; i++) {
		if (ep[i] == k1[i]) Xor[i] = 0;
		else Xor[i] = 1;
	}

	//s0s1구하기
	row = Xor[0] * 2 + Xor[3] * 1;
	col = Xor[1] * 2 + Xor[2] * 1;
	s0 = S0[row][col];			//s0 구하기
	row = Xor[4] * 2 + Xor[7] * 1;
	col = Xor[5] * 2 + Xor[6] * 1;
	s1 = S1[row][col];			//s1 구하기

	if (s0 == 0) {
		s0s1[0] = 0;
		s0s1[1] = 0;
	}
	else if (s0 == 1) {
		s0s1[0] = 0;
		s0s1[1] = 1;
	}
	else if (s0 == 2) {
		s0s1[0] = 1;
		s0s1[1] = 0;
	}
	else if (s0 == 3) {
		s0s1[0] = 1;
		s0s1[1] = 1;
	}

	if (s1 == 0) {
		s0s1[2] = 0;
		s0s1[3] = 0;
	}
	else if (s1 == 1) {
		s0s1[2] = 0;
		s0s1[3] = 1;
	}
	else if (s1 == 2) {
		s0s1[2] = 1;
		s0s1[3] = 0;
	}
	else if (s1 == 3) {
		s0s1[2] = 1;
		s0s1[3] = 1;
	}
	//P4문자열 대입
	for (int i = 0; i < 4; i++) p4[i] = s0s1[P4[i] - 1];
	//p4와 ip의 좌측 4비트와 xor 연산
	for (int i = 0; i < 4; i++) {
		if (ip[i] == p4[i]) p4Xor[i] = 0;
		else p4Xor[i] = 1;
	}

	for (int i = 0; i < 8; i++) {		//sw연산
		if (i < 4) sw[i] = ip[i+4];
		else sw[i] = p4Xor[i - 4];
	}
	//k1으로 연산한 sw 값을 ip에 대입
	for (int i = 0; i < 8; i++) {
		ip[i] = sw[i];
	}

	//위에 했던 과정으로 k2를 사용해 연산
	for (int i = 0; i < 8; i++) {
		if (ep[i] == k2[i]) Xor[i] = 0;
		else Xor[i] = 1;
	}

	row = Xor[0] * 2 + Xor[3] * 1;
	col = Xor[1] * 2 + Xor[2] * 1;
	s0 = S0[row][col];
	row = Xor[4] * 2 + Xor[7] * 1;
	col = Xor[5] * 2 + Xor[6] * 1;
	s1 = S1[row][col];

	if (s0 == 0) {
		s0s1[0] = 0;
		s0s1[1] = 0;
	}
	else if (s0 == 1) {
		s0s1[0] = 0;
		s0s1[1] = 1;
	}
	else if (s0 == 2) {
		s0s1[0] = 1;
		s0s1[1] = 0;
	}
	else if (s0 == 3) {
		s0s1[0] = 1;
		s0s1[1] = 1;
	}
	if (s1 == 0) {
		s0s1[2] = 0;
		s0s1[3] = 0;
	}
	else if (s1 == 1) {
		s0s1[2] = 0;
		s0s1[3] = 1;
	}
	else if (s1 == 2) {
		s0s1[2] = 1;
		s0s1[3] = 0;
	}
	else if (s1 == 3) {
		s0s1[2] = 1;
		s0s1[3] = 1;
	}

	//make p4
	for (int i = 0; i < 4; i++) p4[i] = s0s1[P4[i] - 1];

	//p4와 ip(위의 sw연산) xor연산
	for (int i = 0; i < 4; i++) {
		if (ip[i] == p4[i]) p4Xor[i] = 0;
		else p4Xor[i] = 1;
	}


	for (int i = 0; i < 8; i++) {		//sw연산
		if (i < 4) sw[i] = p4Xor[i];
		else sw[i] = ip[i];
	}
	
	//암호화문 출력
	for (int i = 0; i < 8; i++) {
		ip_1[i] = sw[IP_1[i] - 1];
		cout << ip_1[i] << " ";
	}

}
